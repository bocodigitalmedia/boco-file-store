// Generated by CoffeeScript 1.11.1
var Dependencies, configure,
  hasProp = {}.hasOwnProperty,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Dependencies = (function() {
  Dependencies.prototype.Error = null;

  Dependencies.prototype.Path = null;

  Dependencies.prototype.FileSystem = null;

  Dependencies.prototype.LockManager = null;

  Dependencies.prototype.setImmediate = null;

  Dependencies.prototype.mkdirp = null;

  function Dependencies(props) {
    var key, val;
    for (key in props) {
      if (!hasProp.call(props, key)) continue;
      val = props[key];
      this[key] = val;
    }
    if (this.Error == null) {
      this.Error = (function() {
        try {
          return Error;
        } catch (error1) {}
      })();
    }
    if (this.setImmediate == null) {
      this.setImmediate = (function() {
        if (typeof setImmediate === 'function') {
          return setImmediate;
        }
        if (typeof setTimeout === 'function') {
          return (function(fn) {
            return setTimeout(fn, 0);
          });
        }
      })();
    }
    if (typeof require === 'function') {
      if (this.Path == null) {
        this.Path = require('path');
      }
      if (this.FileSystem == null) {
        this.FileSystem = require('fs');
      }
      if (this.LockManager == null) {
        this.LockManager = require('boco-mutex').LockManager;
      }
      if (this.mkdirp == null) {
        this.mkdirp = require('mkdirp');
      }
    }
  }

  return Dependencies;

})();

configure = function(props) {
  var Error, Exception, FileStore, FileSystem, FileSystemFileStore, LockManager, MemoryFileStore, NotImplemented, Path, PathDoesNotExist, dependencies, fileSystem, memory, mkdirp, ref, setImmediate;
  ref = dependencies = new Dependencies(props), Error = ref.Error, Path = ref.Path, FileSystem = ref.FileSystem, LockManager = ref.LockManager, setImmediate = ref.setImmediate, mkdirp = ref.mkdirp;
  Exception = (function(superClass) {
    extend(Exception, superClass);

    Exception.getMessage = function(payload) {
      return null;
    };

    function Exception(payload) {
      Exception.__super__.constructor.call(this);
      this.payload = payload;
      this.name = this.constructor.name;
      this.message = this.constructor.getMessage(payload);
      if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(this, this.constructor);
      }
    }

    return Exception;

  })(Error);
  NotImplemented = (function(superClass) {
    extend(NotImplemented, superClass);

    function NotImplemented() {
      return NotImplemented.__super__.constructor.apply(this, arguments);
    }

    NotImplemented.getMessage = function(payload) {
      return "Not implemented.";
    };

    return NotImplemented;

  })(Exception);
  PathDoesNotExist = (function(superClass) {
    extend(PathDoesNotExist, superClass);

    function PathDoesNotExist() {
      return PathDoesNotExist.__super__.constructor.apply(this, arguments);
    }

    PathDoesNotExist.getMessage = function(arg) {
      var fullPath;
      fullPath = arg.fullPath;
      return "Path does not exist: " + fullPath;
    };

    return PathDoesNotExist;

  })(Exception);
  FileStore = (function() {
    FileStore.getDefaultBasePath = function() {
      return '/';
    };

    FileStore.prototype.basePath = null;

    FileStore.prototype.lockManager = null;

    function FileStore(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.basePath == null) {
        this.basePath = this.constructor.getDefaultBasePath();
      }
      if (this.lockManager == null) {
        this.lockManager = new LockManager;
      }
    }

    FileStore.prototype.serialize = function(content, done) {
      return done(null, content);
    };

    FileStore.prototype.deserialize = function(content, done) {
      return done(null, content);
    };

    FileStore.prototype.getFullPath = function(path) {
      return Path.join(this.basePath, path);
    };

    FileStore.prototype.getLock = function(path) {
      return this.lockManager.get(path);
    };

    FileStore.prototype.lockSync = function(path, work, done) {
      return this.getLock(path).sync(work, done);
    };

    FileStore.prototype.write = function(path, content, done) {
      return this.serialize(content, (function(_this) {
        return function(error, serialized) {
          var fullPath, work;
          if (error != null) {
            return done(error);
          }
          fullPath = _this.getFullPath(path);
          work = _this.writeFile.bind(_this, fullPath, serialized);
          return _this.lockSync(path, work, done);
        };
      })(this));
    };

    FileStore.prototype.read = function(path, done) {
      var fullPath, work;
      fullPath = this.getFullPath(path);
      work = this.readFile.bind(this, fullPath);
      return this.lockSync(path, work, (function(_this) {
        return function(error, serialized) {
          if (error != null) {
            return done(error);
          }
          return _this.deserialize(serialized, done);
        };
      })(this));
    };

    FileStore.prototype.remove = function(path, done) {
      var fullPath, work;
      fullPath = this.getFullPath(path);
      work = this.removeFile.bind(this, fullPath);
      return this.lockSync(path, work, done);
    };

    FileStore.prototype.writeFile = function(fullPath, content, done) {
      return done(new NotImplemented);
    };

    FileStore.prototype.readFile = function(fullPath, done) {
      return done(new NotImplemented);
    };

    FileStore.prototype.removeFile = function(fullPath, done) {
      return done(new NotImplemented);
    };

    return FileStore;

  })();
  FileSystemFileStore = (function(superClass) {
    extend(FileSystemFileStore, superClass);

    function FileSystemFileStore() {
      return FileSystemFileStore.__super__.constructor.apply(this, arguments);
    }

    FileSystemFileStore.getDefaultBasePath = function() {
      return Path.resolve('.');
    };

    FileSystemFileStore.prototype.ensurePathDir = function(fullPath, done) {
      var dir;
      dir = Path.parse(fullPath).dir;
      return mkdirp(dir, done);
    };

    FileSystemFileStore.prototype.isNotExistError = function(error) {
      return (error != null ? error.code : void 0) === 'ENOENT';
    };

    FileSystemFileStore.prototype.readFile = function(fullPath, done) {
      return FileSystem.readFile(fullPath, (function(_this) {
        return function(error, content) {
          if (_this.isNotExistError(error)) {
            return done(new PathDoesNotExist({
              fullPath: fullPath
            }));
          }
          if (error != null) {
            return done(error);
          }
          return done(null, content);
        };
      })(this));
    };

    FileSystemFileStore.prototype.writeFile = function(fullPath, content, done) {
      return FileSystem.writeFile(fullPath, content, (function(_this) {
        return function(error) {
          if (error == null) {
            return done();
          }
          if (!_this.isNotExistError(error)) {
            return done(error);
          }
          return _this.ensurePathDir(fullPath, function(error) {
            if (error != null) {
              return done(error);
            }
            return _this.writeFile(fullPath, content, done);
          });
        };
      })(this));
    };

    FileSystemFileStore.prototype.removeFile = function(fullPath, done) {
      return FileSystem.unlink(fullPath, (function(_this) {
        return function(error) {
          if (_this.isNotExistError(error)) {
            return done(new PathDoesNotExist({
              fullPath: fullPath
            }));
          }
          if (error != null) {
            return done(error);
          }
          return done();
        };
      })(this));
    };

    return FileSystemFileStore;

  })(FileStore);
  MemoryFileStore = (function(superClass) {
    extend(MemoryFileStore, superClass);

    MemoryFileStore.prototype.memory = null;

    function MemoryFileStore(props) {
      MemoryFileStore.__super__.constructor.call(this, props);
      if (this.memory == null) {
        this.memory = {};
      }
    }

    MemoryFileStore.prototype.readFile = function(fullPath, done) {
      return setImmediate((function(_this) {
        return function() {
          return done(null, _this.memory[fullPath]);
        };
      })(this));
    };

    MemoryFileStore.prototype.writeFile = function(fullPath, content, done) {
      return setImmediate((function(_this) {
        return function() {
          _this.memory[fullPath] = content;
          return done();
        };
      })(this));
    };

    MemoryFileStore.prototype.removeFile = function(fullPath, done) {
      return setImmediate((function(_this) {
        return function() {
          delete _this.memory[fullPath];
          return done();
        };
      })(this));
    };

    return MemoryFileStore;

  })(FileStore);
  fileSystem = function(props) {
    return new FileSystemFileStore(props);
  };
  memory = function(props) {
    return new MemoryFileStore(props);
  };
  return {
    configure: configure,
    dependencies: dependencies,
    Dependencies: Dependencies,
    Exception: Exception,
    NotImplemented: NotImplemented,
    PathDoesNotExist: PathDoesNotExist,
    FileStore: FileStore,
    FileSystemFileStore: FileSystemFileStore,
    MemoryFileStore: MemoryFileStore,
    fileSystem: fileSystem,
    memory: memory
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
